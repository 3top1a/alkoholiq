// grammar.pest
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ ("//"|"#") ~ (!"\n" ~ ANY)* }

// program = _{ SOI ~ instruction* ~ EOI }
program = { SOI ~ (instruction)* ~ EOI }

instruction = {
    push_instr |
    pop_instr |
    dup_instr |
    swap_instr |
    mov_instr |
    binary_instr |
    read_instr |
    print_instr |
    match_instr |
    while_instr
}

// Values and locations
number = @{ ASCII_DIGIT+ }
char_literal = @{ "'" ~ ANY ~ "'" }
variable = @{ "$" ~ ASCII_DIGIT+ }
stack = { "stack" }

source = _{ number | char_literal | variable | stack }
destination = _{ variable | stack }

// Basic stack operations
push_instr = { "push" ~ source }
pop_instr = { "pop" }
dup_instr = { "dup" }
swap_instr = { "swap" }

// Move instruction
mov_instr = { "mov" ~ source ~ "," ~ destination }

// Binary operations
binary_op = @{ "add" | "sub" | "mul" | "div" | "eq" }
binary_instr = { binary_op ~ destination ~ "," ~ source }

// I/O instructions
read_instr = { "read" ~ destination }
print_instr = { "print" ~ source }

// Control flow
match_instr = {
    "match" ~ destination ~
    case_block* ~
    default_block? ~
    "end"
}

case_block = { "case" ~ number ~ instruction* }
default_block = { "default" ~ instruction* }

while_instr = {
    "while" ~ destination ~
    instruction* ~
    "end"
}
