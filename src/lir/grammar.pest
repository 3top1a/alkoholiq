// grammar.pest
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ ("//"|"#") ~ (!"\n" ~ ANY)* }

program = { SOI ~ (instruction)* ~ EOI }

instruction = {
    copy_instr |
    inc_instr |
    dec_instr |
    inc_by_instr |
    dec_by_instr |
    set_instr |
    read_instr |
    print_instr |
    print_msg_instr |
    add_instr |
    sub_instr |
    if_equal_instr |
    if_equal_const_instr |
    if_not_equal_instr |
    until_equal_instr |
    while_not_zero_instr |
    compare_instr |
    raw_instr |
    end_instr
}

// Basic types
variable = @{ ASCII_ALPHA+ }
immediate = @{ ASCII_DIGIT+ }
string_literal = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

// Instructions
copy_instr = { "copy" ~ variable ~ variable }
inc_instr = { "inc" ~ variable }
dec_instr = { "dec" ~ variable }
inc_by_instr = { "inc_by" ~ variable ~ immediate }
dec_by_instr = { "dec_by" ~ variable ~ immediate }
set_instr = { "set" ~ variable ~ immediate }
read_instr = { "read" ~ variable }
print_instr = { "print" ~ variable }
print_msg_instr = { "print_msg" ~ string_literal }
add_instr = { "add" ~ variable ~ variable }
sub_instr = { "sub" ~ variable ~ variable }
if_equal_instr = { "if_eq" ~ variable ~ variable }
if_equal_const_instr = { "if_eq" ~ variable ~ immediate }
if_not_equal_instr = { "if_neq" ~ variable ~ variable }
until_equal_instr = { "until_eq" ~ variable ~ variable }
while_not_zero_instr = { "while_nz" ~ variable }
compare_instr = { "compare" ~ variable ~ variable ~ variable }
raw_instr = { "raw" ~ string_literal }
end_instr = { "end" }
